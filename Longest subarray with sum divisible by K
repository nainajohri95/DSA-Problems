class Solution{
    int longSubarrWthSumDivByK(int a[], int n, int k)
    {
        // Complete the function
        HashMap<Integer,Integer>map = new HashMap<>();
        int sum = 0;
        int maxLength = 0; // To store the length of the longest subarray with sum divisible by K

        // Initialize the remainder 0 at index -1
        map.put(0, -1);
        
        for(int i=0; i<n; i++){
            sum += a[i]; //updating the cumulative sum
            
            int remainder = (sum%k+k)%k;
            
            if(map.containsKey(remainder)){
                //if remainder is already present then update the maxLength
                maxLength = Math.max(maxLength, i - map.get(remainder));
            }
            else {
                // If the remainder is not in the HashMap, add it with its index
                map.put(remainder, i);
            }
        }
       return maxLength;
    }
 
}
