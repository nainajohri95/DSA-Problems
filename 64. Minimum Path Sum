class Solution {
    public int minPathSum(int[][] grid) {
        //right :- (x,y+1)
        //left :- (x+1,y)
        //greedy algorithm will not work here by this method we get o/p as 9
        
        //base condition
        if(grid == null || grid.length == 0 || grid[0].length == 0){
            return 0;
        }
        int rows = grid.length, columns = grid[0].length;
        int[][] dp = new int[rows][columns];
        dp[0][0] = grid[0][0];
        //for columns
        for(int i=1; i<rows; i++){
            dp[i][0] = dp[i-1][0] + grid[i][0];
        }
        
        //for rows
        for(int j=1; j<columns; j++){
            dp[0][j] = dp[0][j-1] + grid[0][j];
        }
        for(int i=1; i<rows; i++){
            for(int j=1; j<columns; j++){
                dp[i][j] = Math.min(dp[i-1][j],dp[i][j-1])+grid[i][j];
            }
        }
        return dp[rows-1][columns-1];
    }
}
